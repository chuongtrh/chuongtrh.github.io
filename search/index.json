[{"content":"Simple timing Quick and dirty timing of a code\nstart := time.Now() // Code to measure here duration := time.Since(start) fmt.Println(duration)  Function call func foo() { defer TrackMeasuring(time.Now(), \u0026quot;trackFoo\u0026quot;) // Code to measure here }  func TrackMeasuring(start time.Time, name string) { log.Printf(\u0026quot;%s took %s\\n\u0026quot;, name, time.Since(start)) }  Callback function func foo(){ TrackMeasuring(\u0026quot;trackBar\u0026quot;, func(){ bar() }) } func bar(){ // Code to measure here }  func TrackMeasuring(name string, f func()) { start := time.Now() defer func() { log.Printf(\u0026quot;%s took %s\\n\u0026quot;, name, time.Since(start)) }() f() }  ","date":"2021-09-07","permalink":"https://chuongtrh.github.io/post/measure-execution-time-in-go/","tags":["golang","tip-trick"],"title":"Measure Execution Time in Go"},{"content":"Solution cd /etc/yum.repos.d/ sudo wget https://download.opensuse.org/repositories/shells:fish/CentOS_8/shells:fish.repo sudo yum install fish  More documents about fish shell can find at here https://fishshell.com\n","date":"2021-09-05","permalink":"https://chuongtrh.github.io/post/install-fish-shell-on-aws-linux/","tags":["tip-trick"],"title":"How do I install Fish Shell on AWS Linux"},{"content":"Godepgraph - Visualize Go package from pkg.go.dev.\nDemo at https://godepgraph.vercel.app\nComponents Backend: Golang\n Fiber godepviz bigcache Deploy on Heroku  Frontend: Nuxt.js\n Viz.js vue-svg-pan-zoom Host on Vercel  Screenshots Source code: https://github.com/chuongtrh/godepgraph\n","date":"2020-10-18","permalink":"https://chuongtrh.github.io/post/godepgraph/","tags":["golang","pkg"],"title":"Godepgraph - Visualize Go package from pkg.go.dev"},{"content":"Visualize Go imports in Graphviz DOT format.\nSupport visualize package from pkg.go.dev\nInstallation $ go get github.com/chuongtrh/godepviz  Usage $ godepviz github.com/gofiber/fiber/v2  The output is a graph in Graphviz dot format.\ndigraph G { rankdir=\u0026quot;LR\u0026quot;; pad=.25; ratio=fill; dpi=360; node [shape=box]; \u0026quot;github.com/gofiber/fiber/v2\u0026quot; -\u0026gt; \u0026quot;github.com/valyala/fasthttp\u0026quot;; \u0026quot;github.com/valyala/fasthttp\u0026quot; -\u0026gt; \u0026quot;github.com/andybalholm/brotli\u0026quot;; \u0026quot;github.com/valyala/fasthttp\u0026quot; -\u0026gt; \u0026quot;github.com/klauspost/compress/flate\u0026quot;; \u0026quot;github.com/valyala/fasthttp\u0026quot; -\u0026gt; \u0026quot;github.com/klauspost/compress/gzip\u0026quot;; \u0026quot;github.com/valyala/fasthttp\u0026quot; -\u0026gt; \u0026quot;github.com/klauspost/compress/zlib\u0026quot;; \u0026quot;github.com/valyala/fasthttp\u0026quot; -\u0026gt; \u0026quot;github.com/valyala/bytebufferpool\u0026quot;; \u0026quot;github.com/gofiber/fiber/v2\u0026quot; -\u0026gt; \u0026quot;github.com/valyala/fasthttp/reuseport\u0026quot;; \u0026quot;github.com/valyala/fasthttp/reuseport\u0026quot; -\u0026gt; \u0026quot;github.com/valyala/tcplisten\u0026quot;; \u0026quot;github.com/gofiber/fiber/v2\u0026quot; [style=filled]; }  You can view a output graph with tool https://dreampuf.github.io/GraphvizOnline or http://viz-js.com\nIf you have the graphviz tools installed you can render it by piping the output to dot:\n$ godepviz github.com/gofiber/fiber/v2 | dot -Tpng -o godep.png  Export SVG file with a large graph have many nodes of dependencies\n$ godepviz github.com/gofiber/fiber/v2 | dot -Gdpi=0 -T svg -o godep.svg  Example  Package net/http   Package github.com/labstack/echo/v4   Package github.com/gofiber/fiber/v2  Source code: https://github.com/chuongtrh/godepviz\n","date":"2020-10-18","permalink":"https://chuongtrh.github.io/post/godepviz/","tags":["golang","pkg","tool"],"title":"Godepviz - Visualize Go imports in Graphviz DOT format"},{"content":"This is a series about Javascript and Node.js. Reference from many sources and websites.\nJavascript  Difference between let vs var vs const Scope in javascript What is hoisting in javascript? What is closure in javascript? What is HOF - higher-order function in javascript? What is Currying function in javascript What is Method Chaining in javascript? What is wrapper object? What is an error - first callback? classical inheritance vs prototypical inheritance in javascript? Promise and Async/Await  Node.js  What is Event loop in Node.js work? How does nodejs handles child thread? Difference between setImmediate() vs setTimeout() What is process.nextTick() What is Streams in Node.js? Types of streams What is EventEmitter in Node.js? What are the pros and cons of Node.js? What is Callback in node.js?  ","date":"2020-08-22","permalink":"https://chuongtrh.github.io/post/javascript_interview/","tags":["javascript","nodejs"],"title":"Series Javascript and Node.js"},{"content":"Using Twilio API for WhatsApp to build a bot.\nFeatures:  /wiki using duckduckgo /unsplash using unsplash /loremflickr using loremflickr /chart using quickchart  Screenshots How to use  Install the dependencies  $ npm install   Create file .env  SID=Your_Account_SID KEY=Your_Auth_Token PORT=5000 AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY S3_BUCKET=dev-red-media S3_REGION=ap-southeast-1 S3_FOLDER=dev CHART_DOMAIN=https://quickchart.io/chart   Start app  $ npm run start:local  Source code: https://github.com/chuongtrh/BotTwilioWhatsapp\n","date":"2020-07-30","permalink":"https://chuongtrh.github.io/post/bot-twilio-whatsapp/","tags":["bot","twilio","whatsapp","nodejs"],"title":"Build Whatsapp Bot using Twilio"},{"content":"Inspire from EarthView from Google.\nUsing 3rd party ColorThiefSwift to generate palette.\nScreenshots Source code: https://github.com/chuongtrh/palette-from-image\n","date":"2020-07-30","permalink":"https://chuongtrh.github.io/post/palette-from-image/","tags":["color","swift","ios"],"title":"Generate Palette From Image"},{"content":"Generate palette color from image\nFeatures  Explore image from unsplash.com Capture image from camera Pick image from album Generate palette color  Screenshot Source code: https://github.com/chuongtrh/PixColor\n","date":"2020-07-30","permalink":"https://chuongtrh.github.io/post/pixcolor_ios/","tags":["color","ios","swift"],"title":"PixColor iOS"},{"content":"Trick convert gif to gif3d using Swift\nFeatures  Simple way to convert gif to gif3d Change background Change size eraser tool  How to work  Add a layer with two white line on top every frame from orignal gif Try to eraser white line to fix with your gif Combine layers and convert to gif  Screenshots Before\nAfter\nSource code: https://github.com/chuongtrh/gif3d\n","date":"2020-07-30","permalink":"https://chuongtrh.github.io/post/convert_gif_to_gif3d/","tags":["swift","gif","ios"],"title":"Trick convert gif to gif3d"},{"content":"Which puppeteer we can easy to create PDF from HTML. You can find a previous post at there. How to generate PDF from HTML?\nWhich is the best practice using puppeteer to create pdf? Here are two approach using puppeteer.\n Always launch puppeteer and create a new browser to create pdf. The browser will be closed when created pdf is done.  (async () =\u0026gt; { const finalHtml = 'html content...'; const browser = await puppeteer.launch(); const page = await browser.pages()[0]; await page.setContent(finalHtml); await page.pdf({path: 'hn.pdf', format: 'A4'}); await browser.close(); })();  Keep 1 instance browser. Always create a new page to create pdf. The page will be closed when created pdf is done.  const browser = await puppeteer.launch(); (async () =\u0026gt; { const finalHtml = 'html content...'; const page = await browser.newPage(); await page.setContent(finalHtml); await page.pdf({path: 'hn.pdf', format: 'A4'}); await page.close(); })();  Solution  Short Lived Browser (Opening new browser instance every time)  Pros:\n A new session opens each time, one instance doesn\u0026rsquo;t interfere with another. Perfect for testing multiple credentials over same/multiple websites. Can use instance wide proxy.  Cons:\n You cannot share data between two instance easily (unless you use userDataDir or cookies). Takes more time to open.  Long Lived Browser (Sharing same browser instance every time)  Pros:\n Opening a new tab takes way less time than opening a new chrome with empty profile. Data is shared between two instance easily. Perfect for scraping/testing same website with same credentials.  Cons:\n You won\u0026rsquo;t be able to use authentication and cookies on same website using different credentials. Cannot use instance wide proxy (at this moment).  Benchmark Here is a benchmark for running only 100 times. The code to run:\nconst bench = require(\u0026quot;@entrptaher/async-bench\u0026quot;); const puppeteer = require(\u0026quot;puppeteer\u0026quot;); const createNewBrowser = async function() { const finalHtml = \u0026quot;html content...\u0026quot;; const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.setContent(finalHtml); await page.pdf({ path: \u0026quot;hn_shortlived.pdf\u0026quot;, format: \u0026quot;A4\u0026quot; }); await browser.close(); return true; }; let longLivedBrowser; const useExisting = async function() { const finalHtml = \u0026quot;html content...\u0026quot;; if (!longLivedBrowser) { longLivedBrowser = await puppeteer.launch(); } const page = await longLivedBrowser.newPage(); await page.setContent(finalHtml); await page.pdf({ path: \u0026quot;hn_longlived.pdf\u0026quot;, format: \u0026quot;A4\u0026quot; }); await page.close(); return true }; let longLivedNoNewTab; const useExitingTab = async function() { const finalHtml = \u0026quot;html content...\u0026quot;; if (!longLivedNoNewTab) { longLivedNoNewTab = await puppeteer.launch(); } const page = (await longLivedNoNewTab.pages())[0]; await page.setContent(finalHtml); await page.pdf({ path: \u0026quot;hn_longlived.pdf\u0026quot;, format: \u0026quot;A4\u0026quot; }); return true }; const times = 100; Promise.all([ bench(createNewBrowser, times), bench(useExisting, times), bench(useExitingTab, times) ]).then(console.log);  The result:\n[ { meanExecTime: 277.3644104500115, execTime: 27736.44104500115, resultOfMethod: true }, { meanExecTime: 36.89182792000472, execTime: 3689.1827920004725, resultOfMethod: true }, { meanExecTime: 11.07780257999897, execTime: 1107.780257999897, resultOfMethod: true } ]  Each has following:\n meanExecTime: Average time to run execTime: Total time to run resultOfMethod: Just some result for identification  The benchmark is incomplete because it doesn\u0026rsquo;t have the machine details etc. But it definitely shows that opening browser each time will result in more time, even if it\u0026rsquo;s only 100 times.\nOn second function, you will also notice opening a new tab takes time, so on third function if you don\u0026rsquo;t close the page, it will take even less time.\nSummary  If you need performance (11ms compared to 277ms), don\u0026rsquo;t care about session, go for existing tab. If you want to run multiple test on same window in parallel, go for new tab. If you need sessions and persistence, go for new browser instance.  More detail at this post on Stackoverflow.\nThanks @Md. Abu Taher answer on my post.\nThanks for reading and happy sharing ","date":"2020-07-26","permalink":"https://chuongtrh.github.io/post/best_practice_using_puppeteer_to_create_pdf/","tags":["puppeteer","html","pdf","nodejs","sharing"],"title":"Best practice using puppeteer to create PDF"},{"content":"Tool visualize pricing. This is a simple tool help internal QC\u0026rsquo;s team testing business logic for CPQ (Configure Price Quote).\nDemo at https://tool-price-m4.now.sh\nFeatures  Visualize pricing by day Visualize pricing by hour  Screenshots Visualize pricing by day Visualize pricing by hour Source code: https://github.com/chuongtrh/visualize_pricing\nThanks for reading and happy sharing ","date":"2020-07-25","permalink":"https://chuongtrh.github.io/post/tool_visualize_pricing/","tags":["visualize","tool","cpq","sharing"],"title":"Tool visualize pricing"},{"content":"Using OpenCV to hack game Lyto different color on OSX.\nDemo with 193 level\n  Build OpenCV on OSX Required  CMake 2.8.8 or higher Xcode 10 or higher Python 2.7 or higher   Building OpenCV from Source git clone https://github.com/opencv/opencv.git python opencv/platforms/ios/build_framework.py ios  Copy opencv2.framework into hackcolor directory.\nMethodology  Take a screenshot of the rect of screen. Detect the circles in the screenshot using Hough in OpenCV. Process circles:  Check radius Find circle with different color   Simulate mouse click on screen Similate the result on screen.  Using function HoughCircles in openCV to detect array circles from image\n+ (NSDictionary *)hack:(NSImage *)image { cv::Mat src; NSImageToMat(image, src); cv::Mat gray; cv::cvtColor(src, gray, cv::COLOR_BGR2GRAY); cv::medianBlur(gray, gray, 5); std::vector\u0026lt;cv::Vec3f\u0026gt; circles; HoughCircles(gray, circles, cv::HOUGH_GRADIENT, 1, src.rows/16, 100, 70, 10, 300 ); cv::Point tempPoint; NSMutableArray *arrPoints = [[NSMutableArray alloc] init]; if(circles.size() \u0026gt; 3) { std::vector\u0026lt;cv::Vec3b\u0026gt; vColors; int tempRadius = circles[0][2]; for( size_t i = 0; i \u0026lt; circles.size(); i++ ) { cv::Vec3i c = circles[i]; int radius = c[2]; //NSLog(@\u0026quot;%ld %d %d\u0026quot;, i, tempRadius, radius); if(std::abs(tempRadius - radius) \u0026lt; 5){ vColors.push_back(GetColorFromMat(src, c)); cv::Point center = cv::Point(c[0], c[1]); cv::circle( src, center, radius-2, cv::Scalar(255,0,255), 2, cv::LINE_AA); } } for( size_t i = 0; i \u0026lt; vColors.size(); i++ ) { cv::Vec3b color1 = vColors[i]; bool flag = true; for( size_t j = 0; j \u0026lt; vColors.size(); j++ ) { cv::Vec3b color2 = vColors[j]; if(i!=j \u0026amp;\u0026amp; color1[0]==color2[0] \u0026amp;\u0026amp; color1[1]==color2[1] \u0026amp;\u0026amp; color1[2]==color2[2]) { flag = false; } } if(flag){ cv::Vec3i c = circles[i]; tempPoint = cv::Point(c[0], c[1]); cv::circle( src, tempPoint, 10, cv::Scalar(255,0,255), 4, cv::LINE_8); NSLog(@\u0026quot;%ld R: %d G:%d B:%d\u0026quot;, i, color1[0], color1[1], color1[2]); [arrPoints addObject: @{ @\u0026quot;x\u0026quot;: [NSNumber numberWithInt:tempPoint.x], @\u0026quot;y\u0026quot;: [NSNumber numberWithInt:tempPoint.y]}]; } } if(arrPoints.count\u0026gt;1){ NSLog(@\u0026quot;xx: %ld\u0026quot;, arrPoints.count); } } return @{ @\u0026quot;image\u0026quot;: MatToNSImage(src), @\u0026quot;points\u0026quot;: arrPoints, }; }  Source code: https://github.com/chuongtrh/hack_lyto_different_color_osx\nThanks for reading and happy sharing ","date":"2020-07-25","permalink":"https://chuongtrh.github.io/post/hack_lyto_different_color_osx/","tags":["swift","opencv","osx"],"title":"Using OpenCV to hack game Lyto Different Color on OSX"},{"content":"Mở đầu Nhân dịp 10 năm tiki có làm event \u0026ldquo;Thập Kỷ đi cùng bạn\u0026rdquo;, để người dùng nhìn lại quá trình mua sắm trên Tiki.vn. Dưới cái nhìn là Dev như mình thì những chỉ số tiki đưa ra chưa đủ sướng. Cùng với đợt Covid-19 ở nhà nên mình quyết định mần 1 cái chrome extension. (lần đầu code món này).\nHướng dẫn cài đặt Bước 1: Tải source code và giải nén Bước 2: Mở chế độ Developer mode Bước 3: Load unpacked, mở tới thư mục đã giải nén trước đó. Tada, đã cài xong.\nHướng dẫn sử dụng Click vào icon extension, rồi chọn Options\nLưu ý: Hãy đăng nhập vào tiki.vn trước nhé.  Thư viện sử dụng  jquery moment apexcharts  Source code: https://github.com/chuongtrh/tiki-explore-history-extension\nThanks for reading and happy sharing ","date":"2020-07-24","permalink":"https://chuongtrh.github.io/post/tiki-explore-history-extension/","tags":["extenstion","chrome","javascript"],"title":"Tiki Explore History Extension"},{"content":"Nest applications handle requests and produce responses in a sequence we refer to as the request lifecycle. With the use of middleware, pipes, guards, and interceptors, it can be challenging to track down where a particular piece of code executes during the request lifecycle, especially as global, controller level, and route level components come into play. In general, a request flows through middleware to guards, then to interceptors, then to pipes and finally back to interceptors on the return path (as the response is generated).\nRequest lifecycle  Middleware Guards Pre Interceptors Pipes Controller Service Post Interceptors Filters  Read more details at there\nThanks for reading and happy sharing ","date":"2020-07-23","permalink":"https://chuongtrh.github.io/post/request-lifecycle-in-nestjs/","tags":["nestjs","javascript"],"title":"Request Lifecycle in Nestjs"},{"content":"A mindmap about Neo4j.\n","date":"2020-07-23","permalink":"https://chuongtrh.github.io/post/mindmap-neo4j/","tags":["neo4j","graphdatabase","mindmap"],"title":"Mindmap about Neo4j"},{"content":"The mindmap about Google Cloud Platform (GCP).\n  Overview GCP   Cloud Function   Cloud Run   Database   Storage   ","date":"2020-07-22","permalink":"https://chuongtrh.github.io/post/mindmap-gcp/","tags":["gcp","cloud","mindmap","devops"],"title":"Mindmap about GCP"},{"content":"How to generate a pdf using puppeteer? Check out at there.\nAt this post, I want to share about tip how to improve performance generate pdf.\nWe can use page.setContent to improve performance.\nUsing goto\nconsole.time('launch') const browser = await puppeteer.launch({args: ['--no-sandbox'],headless: true }) console.timeEnd('launch') console.time('newPage') const page = await browser.newPage(); console.timeEnd('newPage') console.time('goto') await page.goto(`data: text/html ,${finalHtml}`, {waitUntil: 'networkidle0'}) console.timeEnd('goto') console.time('pdf') await page.pdf(options) console.timeEnd('pdf')  Log time\nlaunch: 168.766ms newPage: 87.764ms goto: 1018.925ms pdf: 109.687ms  Using setContent\nconsole.time('launch') const browser = await puppeteer.launch({args: ['--no-sandbox'],headless: true}) console.timeEnd('launch') console.time('newPage') const page = await browser.newPage() console.timeEnd('newPage') console.time('setContent') await page.setContent(finalHtml); console.timeEnd('setContent') console.time('pdf') await page.pdf(options); console.timeEnd('pdf')  Log time\nlaunch: 147.349ms newPage: 89.669ms setContent: 15.247ms pdf: 161.551ms  Gotcha, setContent faster than goto 15ms vs 1018ms\nThanks for reading and happy sharing ","date":"2020-07-22","permalink":"https://chuongtrh.github.io/post/improve-performance-generate-pdf-using-pupppeteer/","tags":["html","pdf","puppeteer","handlebars","nodejs","sharing"],"title":"Improve Performance Generate Pdf Using Pupppeteer"},{"content":"Generate a simple PDF invoice from HTML using puppeteer \u0026amp; handlebars.\nIntroduce  Puppeteer   Puppeteer is Node.js library giving you access to a headless Chrome browser. This makes it a breeze to generate PDF files with Node.js\n  Handlebars   Handlebars provides the power necessary to let you build semantic templates effectively with no frustration\n How to use  Run npm install to install package in package.json Run node pdf.js to generate invoice.pdf  Generate invoice  Prepare content html (invoice.html) Using handlebars to binding data to content html Using Puppeteer to generate pdf from final html  const fs = require(\u0026quot;fs\u0026quot;); const path = require(\u0026quot;path\u0026quot;); const puppeteer = require('puppeteer'); const handlebars = require(\u0026quot;handlebars\u0026quot;); (async () =\u0026gt; { var dataBinding = { items: [{ name: \u0026quot;item 1\u0026quot;, price: 100 }, { name: \u0026quot;item 2\u0026quot;, price: 200 }, { name: \u0026quot;item 3\u0026quot;, price: 300 } ], total: 600, isWatermark: false } var templateHtml = fs.readFileSync(path.join(process.cwd(), 'invoice.html'), 'utf8'); var template = handlebars.compile(templateHtml); var finalHtml = template(dataBinding); var options = { format: 'A4', headerTemplate: \u0026quot;\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u0026quot;, footerTemplate: \u0026quot;\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u0026quot;, displayHeaderFooter: false, margin: { top: \u0026quot;40px\u0026quot;, bottom: \u0026quot;100px\u0026quot; }, printBackground: true, path: 'invoice.pdf' } const browser = await puppeteer.launch({ args: ['--no-sandbox'], headless: true }); const page = await browser.newPage(); await page.goto(`data: text/html,${finalHtml}`, { waitUntil: 'networkidle0' }); await page.pdf(options); await browser.close(); })();  How to display paid stamp watermark on the invoice? Using handlebars to check param isWatermark\n{{#if isWatermark}} \u0026lt;div style=\u0026quot;border-width: 6px;border-style: solid; border-color: #008000;border-radius: 8px; color: #008000; opacity:0.6; position: absolute; z-index: 1; left:40%; top:30%; font-size: 60pt;-webkit-transform: rotate(-45deg);-ms-transform: rotate(-45deg);transform: rotate(-45deg); font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\u0026quot;\u0026gt; PAID \u0026lt;/div\u0026gt; {{/if}}  Change isWatermark: true and run node pdf.js again\nYou can find the source code at Github\nThanks for reading and happy sharing ","date":"2020-07-22","permalink":"https://chuongtrh.github.io/post/html_to_pdf/","tags":["html","pdf","puppeteer","handlebars","nodejs"],"title":"Generate a simple PDF from HTML"},{"content":"console.log(\u0026quot;Hello world\u0026quot;)  Here is the first post on my blog.\n","date":"2020-07-22","permalink":"https://chuongtrh.github.io/post/my-first-post/","tags":[],"title":"My First Post"}]